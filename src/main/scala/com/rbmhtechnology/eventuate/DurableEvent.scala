/*
 * Copyright (C) 2015 Red Bull Media House GmbH <http://www.redbullmediahouse.com> - all rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.rbmhtechnology.eventuate

import DurableEvent._

/**
 * Provider API.
 *
 * Event storage format.
 *
 * @param payload Custom, application-defined event.
 * @param systemTimestamp Wall-clock timestamp, generated by emitter (e.g. [[EventsourcedActor]]).
 * @param vectorTimestamp Vector timestamp, generated by emitter (e.g. [[EventsourcedActor]]).
 * @param processId Process id of emitter (e.g. [[EventsourcedActor]]).
 * @param sourceLogId Source log id from last replication. Equal to `targetLogId` if not replicated yet.
 * @param targetLogId Target log id from last replication.
 * @param sourceLogSequenceNr Source log sequence number from last replication.
 * @param targetLogSequenceNr Target log sequence number from last replication.
 */
case class DurableEvent(
  payload: Any,
  systemTimestamp: Long,
  vectorTimestamp: VectorTime,
  processId: String,
  sourceLogId: String = UndefinedLogId,
  targetLogId: String = UndefinedLogId,
  sourceLogSequenceNr: Long = UndefinedSequenceNr,
  targetLogSequenceNr: Long = UndefinedSequenceNr) {

  /**
   * Local sequence number (= `targetLogSequenceNr`).
   */
  def sequenceNr: Long =
    targetLogSequenceNr

  /**
   * Returns `true` if this event was emitted by an emitter with given `processId`.
   *
   * @see [[EventsourcedActor]]
   */
  def local(processId: String): Boolean =
    this.processId == processId
}

object DurableEvent {
  val UndefinedLogId = ""
  val UndefinedSequenceNr = 1L
}
