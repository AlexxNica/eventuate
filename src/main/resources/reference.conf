akka {
  actor {
    provider = "akka.remote.RemoteActorRefProvider"

    serializers {
      # Protobuf serializer for DurableEvent
      eventuate-event = "com.rbmhtechnology.eventuate.DurableEventSerializer"
    }

    serialization-bindings {
      # Serialization binding for DurableEvent
      "com.rbmhtechnology.eventuate.DurableEvent" = eventuate-event
    }
  }

  remote.enabled-transports = ["akka.remote.netty.tcp"]

  loglevel = "ERROR"
}

log.replication {
  # Maximum batch size for event transfer and event writing to the target
  # event log.
  transfer-batch-size-max = 200

  # Event transfer retry interval. Event transfer is re-tried at this interval
  # if previous transfer batch was empty.
  transfer-retry-interval = 5s

  # Connect retry interval. Connection to a remote location is re-tried at
  # this interval if previous connect attempt failed.
  connect-retry-interval = 3s

  # Maximum duration of missing heartbeats from a remote location until
  # that location is considered unavailable.
  failure-detection-limit = 60s
}

log {
  # Maximum write batch size for emitted events by event-sourced actors.
  write-batch-size-max = 200
}

log.leveldb {
  # Root directory for storing the log directories of individual event logs.
  dir = target

  # Use fsync on write.
  fsync = on

  # Dispatcher for writes.
  write-dispatcher {
    executor = "thread-pool-executor"
    type = PinnedDispatcher
  }

  # Dispatcher for reads.
  read-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-max = 8
    }
  }
}
