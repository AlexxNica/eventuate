akka {
  actor {
    serializers {
      eventuate-durable-event = "com.rbmhtechnology.eventuate.serializer.DurableEventSerializer"
      eventuate-replication-filter = "com.rbmhtechnology.eventuate.serializer.ReplicationFilterSerializer"
      eventuate-replication-protocol = "com.rbmhtechnology.eventuate.serializer.ReplicationProtocolSerializer"
    }

    serialization-bindings {
      "com.rbmhtechnology.eventuate.DurableEvent" = eventuate-durable-event
      "com.rbmhtechnology.eventuate.ReplicationFilter$Format" = eventuate-replication-filter
      "com.rbmhtechnology.eventuate.ReplicationProtocol$Format" = eventuate-replication-protocol
    }
  }
}

eventuate {
  log.write {
    # Maximum write batch size for emitted events by event-sourced actors.
    batch-size-max = 200
  }

  log.replication {
    # Maximum batch size for event replication and event writing to the target
    # event log.
    batch-size-max = 200

    # Event replication retry interval. Event replication is re-tried at this
    # interval if previous transfer batch was empty.
    retry-interval = 5s

    # Maximum duration of missing heartbeats from a remote location until
    # that location is considered unavailable.
    failure-detection-limit = 60s
  }

  log.leveldb {
    # Root directory for storing the log directories of individual event logs.
    dir = target

    # Use fsync on write.
    fsync = on

    # Dispatcher for writes.
    write-dispatcher {
      executor = "thread-pool-executor"
      type = PinnedDispatcher
    }

    # Dispatcher for reads.
    read-dispatcher {
      type = Dispatcher
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 2
        parallelism-max = 8
      }
    }
  }
}
